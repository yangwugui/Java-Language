/*
 * Canvas.java
 *
 * Created on __DATE__, __TIME__
 */

package ruandao.mypainter;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author  __USER__
 */
public class Canvas extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 9099580057688873579L;

	/** Creates new form Canvas */
	public Canvas() {
		initComponents();
	}

	public CanvasModel canvasModel = new CanvasModel();

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				formMousePressed(evt);
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				formMouseReleased(evt);
			}

		});
		addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				formMouseDragged(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300,
				Short.MAX_VALUE));
	}// </editor-fold>
	//GEN-END:initComponents

	private void formMouseReleased(java.awt.event.MouseEvent evt) {
		canvasModel.isDrawing = false;
        if (canvasModel.currentShape != null)
        {
        	canvasModel.shapes.add(canvasModel.currentShape);
        	canvasModel.currentShape = null;
        }
		repaint();	
    }

	private void formMouseDragged(java.awt.event.MouseEvent evt) {
        if (!canvasModel.isDrawing) return;

        int width = Math.abs(evt.getX() - canvasModel.x0);
        int height = Math.abs(evt.getY() - canvasModel.y0);
        int left = (evt.getX() > canvasModel.x0 ? canvasModel.x0 : evt.getX());
        int top = (evt.getY()>canvasModel.y0 ? canvasModel.y0 : evt.getY());

        do
        {
            if (canvasModel.currentMode=="image") 
            { 
                canvasModel.currentShape = new ImageShape(canvasModel.currentImage, left, top, width, height);
                 break; 
            }
            if (canvasModel.currentMode=="rectangle") 
            { 
		        canvasModel.currentShape = new RectangleShape(canvasModel.currentColor,(float)2, left, top, width, height);
                break; 
            }
            if (canvasModel.currentMode=="ellipse") 
            { 
               //currentShape = new EllipseShape(this.colorButton.BackColor,(float)this.borderNumeric.Value, left, top, width, height);
                break; 
            }
        } while (false);
         repaint();
	}

	private void formMousePressed(java.awt.event.MouseEvent evt) {
        canvasModel.isDrawing = true;

        canvasModel.x0 = evt.getX();
        canvasModel.y0 = evt.getY();
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	// End of variables declaration//GEN-END:variables

	public void paint(Graphics g) {
		g.clearRect(0,0,this.getWidth(),this.getHeight());
		for (Shape s : canvasModel.shapes) {
			s.draw(g);
		}
		if (canvasModel.currentShape != null)
			canvasModel.currentShape.draw(g);
	}
}